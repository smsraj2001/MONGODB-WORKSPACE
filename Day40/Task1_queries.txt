MONGO QUERIES:
--------------

1. db.restaurants.find();

2. db.restaurants.find( {} , {restaurant_id: 1, name: 1, borough: 1, cuisine: 1});

3. db.restaurants.find( {} , {restaurant_id: 1, name: 1, borough: 1, cuisine: 1, _id: 0});

4. db.restaurants.find( {} , {restaurant_id: 1, name: 1, borough: 1, zipcode: 1, _id: 0});

5. db.restaurants.find( {borough: { $eq: "Bronx" } } , {restaurant_id: 1, name: 1, _id: 0});

6. db.restaurants.find( {borough: { $eq: "Bronx" } } , {restaurant_id: 1, name: 1, _id: 0}).limit(5);

7. db.restaurants.find( {borough: { $eq: "Bronx" } } , {restaurant_id: 1, name: 1, _id: 0}).skip(5).limit(5);

8. db.restaurants.find( {"grades.score": { $gt: 90 } } , {restaurant_id: 1, name: 1, _id: 0});

9. db.restaurants.find({$and:[{"grades.score": { $gt: 80 } }, {"grades.score": { $lt: 100 } }]}, {restaurant_id: 1, name: 1, _id: 0});

10. db.restaurants.find({"address.coord.0": { $lt: -95.754168 }}, {restaurant_id: 1, name: 1, "address.coord": 1, _id: 0});

11. db.restaurants.find({$and:[{$and:[{cuisine : {$ne: "American"}}, {"grades.score": { $gt: 70 } }]}, {"address.coord.0": { $lt: -65.754168 }} ]}, {restaurant_id: 1, name: 1, _id: 0} );

11. Another solution: db.restaurants.find(   {    $and: [{ 'cuisine': { $ne: 'American' } },{ 'grades.score': { $gt: 70 } },{ 'address.coord.0': { $lt: -65.754168 } }]},{    _id: 0,    restaurant_id: 1,    name: 1} )

12. db.restaurants.find(   {    $and: [{ 'cuisine': { $ne: 'American' } },{ 'grades.grade': { $eq: 'A' } },{ borough: { $ne: "Brooklyn" } }]},{    _id: 0,    restaurant_id: 1, cuisine: 1, "grades.grade": 1,   name: 1} ).sort({cuisine: -1});

12. Another solution: db.restaurants.find(
  {
    $and: [
      { 'cuisine': { $ne: 'American' } },
      { 'grades.grade': { $all: ['A'] } },  // All grades must be 'A'
      { borough: { $ne: 'Brooklyn' } }
    ]
  },
  {
    _id: 0,
    restaurant_id: 1,
    cuisine: 1,
    "grades.grade": 1,
    name: 1
  }
).sort({ cuisine: -1 });


13. db.restaurants.find({name: { $regex: /^Wil/}}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1});

14. db.restaurants.find({"grades.score": { $lte: 10}}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1});

15. db.restaurants.find({$or:[{ 'cuisine': { $nin: ['American', 'Chinese'] } }, {name: { $regex: /^Wil/}}]}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1});

16. db.restaurants.find({ $and: [{ "grades.1.grade": {$eq: 'A'}}, {"grades.score": {$eq: 9}}, {"grades.date": {$eq: ISODate("2014-08-11T00:00:00Z")}}]}, {restaurant_id: 1, name: 1, grades: 1});

16. Another solution
    db.restaurants.find(
    {
        $and: [
        { "grades.1.grade": { $eq: 'A' } }, 
        { "grades.1.score": { $eq: 9 } }, 
        { "grades.1.date": { $eq: ISODate("2014-08-11T00:00:00Z") } }
        ]
    },
    {
        restaurant_id: 1, 
        name: 1, 
        grades: 1,
        _id: 0
    }
    );


17. db.restaurants.find().sort({name: 1});

18. db.restaurants.find({ "address.street": { $exists: false } }, { restaurant_id: 1, name: 1, address: 1, _id: 0 });

19. db.restaurants.find({ name: {$regex: /mon/}}, {name: 1, borough: 1, "coord.0": 1, "coord.1": 1, cuisine: 1});

20. db.restaurants.find({name: { $regex: /^Mad/}}, {name: 1, borough: 1, "coord.0": 1, "coord.1": 1, cuisine: 1});
